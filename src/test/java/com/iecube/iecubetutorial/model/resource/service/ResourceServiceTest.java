package com.iecube.iecubetutorial.model.resource.service;

import com.iecube.iecubetutorial.model.resource.entity.Resource;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@SpringBootTest
@RunWith(SpringRunner.class)
public class ResourceServiceTest {

    @Autowired
    private ResourceService resourceService;

    @Test
    public void genHtmlFile(){
        String base64Content = "";
        Resource res = resourceService.writeHtmlToFile(base64Content);
        System.out.println(res);
    }
}
